#!/usr/bin/env python3
"""
Complete test of all provider fixes after database and backend deployment
"""

import requests
import time
from datetime import datetime

BASE_URL = "https://maintenance-platform-backend.onrender.com"

def test_complete_provider_system():
    print("üéØ COMPLETE PROVIDER SYSTEM TEST")
    print("=" * 40)
    print("Testing after ALL database fixes + backend deployment")
    print()
    
    # Generate unique test data
    timestamp = int(time.time())
    test_email = f"completetest{timestamp}@example.com"
    test_phone = f"011{timestamp % 100000000:08d}"
    test_password = "CompleteTest123!"
    
    print(f"üìß Test Email: {test_email}")
    print(f"üì± Test Phone: {test_phone}")
    print()
    
    try:
        # 1. REGISTRATION TEST
        print("1Ô∏è‚É£ TESTING SERVICE PROVIDER REGISTRATION")
        print("-" * 45)
        
        registration_data = {
            "email": test_email,
            "phone": test_phone,
            "password": test_password,
            "user_type": "service_provider",
            "first_name": "Complete",
            "last_name": "TestProvider",
            "national_id": "29912011234567",
            "date_of_birth": "1999-12-01",
            "preferred_language": "ar",
            "business_name": "Complete Test Services"
        }
        
        register_response = requests.post(
            f"{BASE_URL}/api/auth/register",
            json=registration_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"Status: {register_response.status_code}")
        
        if register_response.status_code == 201:
            print("‚úÖ REGISTRATION SUCCESS!")
            result = register_response.json()
            user = result.get('user', {})
            print(f"   User ID: {user.get('id')}")
            print(f"   User Type: {user.get('user_type')}")
            
        elif register_response.status_code == 409:
            print("‚úÖ USER EXISTS (Registration format works)")
            
        elif register_response.status_code == 500:
            error = register_response.json()
            error_msg = str(error)
            if "does not exist" in error_msg:
                print("‚ùå STILL MISSING DATABASE COLUMNS!")
                print(f"   Error: {error}")
                print("   üí° Run the missing SQL migration scripts")
                return False
            else:
                print(f"‚ùå Registration error: {error}")
                return False
        else:
            print(f"‚ùå Unexpected registration status: {register_response.status_code}")
            error = register_response.json() if register_response.headers.get('content-type') == 'application/json' else register_response.text
            print(f"   Error: {error}")
            return False
        
        # 2. LOGIN TEST
        print("\n2Ô∏è‚É£ TESTING LOGIN")
        print("-" * 20)
        
        login_data = {
            "email_or_phone": test_email,
            "password": test_password
        }
        
        login_response = requests.post(
            f"{BASE_URL}/api/auth/login",
            json=login_data,
            headers={"Content-Type": "application/json"},
            timeout=15
        )
        
        print(f"Status: {login_response.status_code}")
        
        if login_response.status_code != 200:
            print(f"‚ùå LOGIN FAILED!")
            error = login_response.json() if login_response.headers.get('content-type') == 'application/json' else login_response.text
            print(f"   Error: {error}")
            return False
            
        login_result = login_response.json()
        access_token = login_result.get('access_token')
        print("‚úÖ LOGIN SUCCESS!")
        
        # 3. PROVIDER PROFILE TEST (THE MAIN TEST)
        print("\n3Ô∏è‚É£ TESTING PROVIDER PROFILE ENDPOINT")
        print("-" * 40)
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        profile_response = requests.get(
            f"{BASE_URL}/api/providers/profile",
            headers=headers,
            timeout=15
        )
        
        print(f"Status: {profile_response.status_code}")
        
        if profile_response.status_code == 200:
            print("üéâ PROVIDER PROFILE SUCCESS!")
            result = profile_response.json()
            
            # Verify all expected data
            profile = result.get('profile', {})
            services = result.get('services', [])
            locations = result.get('locations', [])
            service_areas = result.get('service_areas', [])
            
            print(f"‚úÖ Profile Data:")
            print(f"   ‚Ä¢ Business: {profile.get('business_name', 'N/A')}")
            print(f"   ‚Ä¢ Available: {profile.get('is_available', 'N/A')}")
            print(f"   ‚Ä¢ Rating: {profile.get('average_rating', 'N/A')}")
            print(f"   ‚Ä¢ Verification: {profile.get('verification_status', 'N/A')}")
            
            print(f"‚úÖ Related Data:")
            print(f"   ‚Ä¢ Services: {len(services)} offered")
            print(f"   ‚Ä¢ Locations: {len(locations)} tracked")
            print(f"   ‚Ä¢ Service Areas: {len(service_areas)} defined")
            
            return True
            
        elif profile_response.status_code == 500:
            error = profile_response.json()
            error_msg = str(error)
            
            if "does not exist" in error_msg:
                # Parse specific missing column/table
                if "service_provider_profiles" in error_msg:
                    print("‚ùå MISSING: service_provider_profiles columns")
                    print("   üí° Run: database/complete_service_provider_profiles_fix.sql")
                elif "provider_services" in error_msg and "is_active" in error_msg:
                    print("‚ùå MISSING: provider_services.is_active column")
                    print("   üí° Run: database/fix_provider_services_table.sql")
                elif "provider_service_areas" in error_msg and "area_name" in error_msg:
                    print("‚ùå MISSING: provider_service_areas.area_name column")
                    print("   üí° Run: database/fix_provider_service_areas_table.sql")
                elif "provider_locations" in error_msg and "updated_at" in error_msg:
                    print("‚ùå MISSING: provider_locations.updated_at column")
                    print("   üí° Run: database/fix_provider_locations_table.sql")
                else:
                    print(f"‚ùå MISSING DATABASE COLUMN: {error}")
                    
            elif "has no attribute" in error_msg:
                if "last_updated" in error_msg:
                    print("‚ùå BACKEND: ProviderLocation missing last_updated")
                    print("   üí° Deploy backend with updated ProviderLocation model")
                elif "is_active" in error_msg:
                    print("‚ùå BACKEND: ProviderService missing is_active") 
                    print("   üí° Deploy backend with updated ProviderService model")
                else:
                    print(f"‚ùå BACKEND MODEL ISSUE: {error}")
            else:
                print(f"‚ùå OTHER 500 ERROR: {error}")
                
        else:
            print(f"‚ùå UNEXPECTED STATUS: {profile_response.status_code}")
            error = profile_response.json() if profile_response.headers.get('content-type') == 'application/json' else profile_response.text
            print(f"   Response: {error}")
            
    except Exception as e:
        print(f"‚ùå TEST FAILED: {e}")
        
    return False

if __name__ == "__main__":
    print(f"üß™ Complete Provider System Test")
    print(f"üïí {datetime.now()}")
    print(f"üîó Backend: {BASE_URL}")
    print()
    
    success = test_complete_provider_system()
    
    print("\n" + "=" * 60)
    print("üìã FINAL RESULT:")
    
    if success:
        print("üéâ COMPLETE SUCCESS! ALL PROVIDER FEATURES WORKING!")
        print("‚úÖ Service provider registration works")
        print("‚úÖ Service provider login works") 
        print("‚úÖ Provider dashboard loads completely")
        print("‚úÖ All database schemas match backend models")
        print()
        print("üåê READY FOR PRODUCTION:")
        print("   Frontend: siyaana.netlify.app")
        print("   Backend: maintenance-platform-backend.onrender.com")
        print()
        print("üë∑ Users can now register as service providers!")
        print("üì± Provider dashboard fully functional!")
        
    else:
        print("‚ùå STILL NEEDS FIXES")
        print()
        print("üìã REQUIRED STEPS:")
        print("1. Run ALL database migration scripts in Supabase")
        print("2. Deploy backend with updated models to Render") 
        print("3. Test again with this script")
        print()
        print("üìÅ DATABASE SCRIPTS TO RUN:")
        print("   ‚Ä¢ database/complete_service_provider_profiles_fix.sql")
        print("   ‚Ä¢ database/fix_provider_services_table.sql")
        print("   ‚Ä¢ database/fix_provider_service_areas_table.sql") 
        print("   ‚Ä¢ database/fix_provider_locations_table.sql")
        print()
        print("üîÑ Then deploy backend and test again")