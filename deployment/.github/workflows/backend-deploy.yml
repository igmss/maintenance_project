name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'maintenance-platform-backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'maintenance-platform-backend/**'

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: ./maintenance-platform-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety
        
    - name: Run linting
      working-directory: ./maintenance-platform-backend
      run: |
        flake8 src/ --max-line-length=100 --exclude=migrations
        
    - name: Run security checks
      working-directory: ./maintenance-platform-backend
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run tests with coverage
      working-directory: ./maintenance-platform-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./maintenance-platform-backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          ./maintenance-platform-backend/coverage.xml
          ./maintenance-platform-backend/htmlcov/
          ./maintenance-platform-backend/bandit-report.json
          ./maintenance-platform-backend/safety-report.json

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './maintenance-platform-backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      working-directory: ./maintenance-platform-backend
      run: |
        docker build -t maintenance-platform-backend:${{ github.sha }} .
        docker tag maintenance-platform-backend:${{ github.sha }} maintenance-platform-backend:latest
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 5000:5000 \
          -e FLASK_ENV=testing \
          -e JWT_SECRET_KEY=test-key \
          maintenance-platform-backend:${{ github.sha }}
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
        docker stop test-container
        
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'
          
    - name: Wait for deployment
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        echo "Waiting for deployment to complete..."
        for i in {1..30}; do
          STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID" | \
            jq -r '.service.serviceDetails.deployStatus')
          echo "Deployment status: $STATUS"
          if [ "$STATUS" = "live" ]; then
            echo "Deployment successful!"
            break
          elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "deploy_failed" ]; then
            echo "Deployment failed!"
            exit 1
          fi
          sleep 30
        done
        
    - name: Health check
      run: |
        sleep 60  # Wait for service to be fully ready
        curl -f https://maintenance-platform-api.onrender.com/api/health || exit 1
        echo "Health check passed!"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Backend deployment successful!"
        echo "üöÄ API is live at: https://maintenance-platform-api.onrender.com"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Backend deployment failed!"
        echo "Please check the logs and try again."

  staging-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render Staging
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_STAGING_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
      run: |
        curl -X POST "https://api.render.com/v1/services/$RENDER_STAGING_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'
          
    - name: Health check staging
      run: |
        sleep 120  # Wait for staging service to be ready
        curl -f https://maintenance-platform-api-staging.onrender.com/api/health || exit 1
        echo "Staging health check passed!"

